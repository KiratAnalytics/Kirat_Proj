COMMIT;
SET TRANSACTION READ NAME 'queryprep';

--Query: Which employees worked on projects costing over $50,000?
SELECT DISTINCT e.EmployeeID
FROM Employee e
INNER JOIN Assigned a USING(EmployeeID)
INNER JOIN Project p USING(ProjectID)
WHERE p.EstimatedCost>50000;

--Query extension: If project cost less than 50000, display as 'under'. Otherwise, display as 'over'.
SELECT DISTINCT p.ProjectID,
   CASE 
        WHEN p.EstimatedCost>50000 THEN 'Over'
        WHEN p.EstimatedCost<50000 THEN 'Under'
        ELSE 'Equal'
    END "Budget Check"
FROM Project p;

--Query: Report for developers with Master education level. Show last name before first.
SELECT e.EmployeeID, e.LastName||' '||e.FirstName "Emp_FullName"
FROM Employee e
INNER JOIN Developer d USING (EmployeeID)
WHERE d.EducationLevel='Master';

--Query: Developers and types of technological devices they are trained in (if trained in at least 2).
SELECT e.EmployeeID, COUNT(td.DeviceType) "Number of devices trained"
FROM Employee e
INNER JOIN Operates o ON e.EmployeeID=o.EmployeeID
INNER JOIN TechnologicalDevice td ON td.DeviceID=o.DeviceID
GROUP BY e.EmployeeID
HAVING COUNT(td.DeviceType)>=2;

--Query: Count meetings for projects hosted by Dept R&D B
SELECT COUNT(*) AS "Meetings for project hosted by R And D Dept B"
FROM TrainingSchedule ts
INNER JOIN Project p ON p.ProjectID=ts.ProjectID
INNER JOIN Department d ON d.DepartmentCode=p.DepartmentCode
WHERE d.DepartmentName='Research and Development Department B';

--Query: All meeting schedules attended by dev Jeff Thomas in Q1 of 2020
SELECT ts.*
FROM TrainingSchedule ts
INNER JOIN Developer d ON d.EmployeeID=ts.DEmployeeID
INNER JOIN Employee e ON e.EmployeeID=d.EmployeeID
WHERE e.FirstName='Jeff' AND e.LastName='Thomas' AND MeetingTime BETWEEN '01-JAN-2020' AND '31-MAR-2020';

--Nested query: 
